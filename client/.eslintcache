[{"D:\\NeurosurgeryStatistics\\client\\src\\index.js":"1","D:\\NeurosurgeryStatistics\\client\\src\\App.js":"2","D:\\NeurosurgeryStatistics\\client\\src\\Navigation\\Navigation.js":"3","D:\\NeurosurgeryStatistics\\client\\src\\Theme\\ThemeProvider.js":"4","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Datebases.js":"5","D:\\NeurosurgeryStatistics\\client\\src\\API\\PostAPI.js":"6","D:\\NeurosurgeryStatistics\\client\\src\\AddPatient\\AddPatient.js":"7","D:\\NeurosurgeryStatistics\\client\\src\\NewEntry\\NewEntry.js":"8","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Localisations.js":"9","D:\\NeurosurgeryStatistics\\client\\src\\API\\GetAPI.js":"10","D:\\NeurosurgeryStatistics\\client\\src\\API\\DeleteAPI.js":"11","D:\\NeurosurgeryStatistics\\client\\src\\AddIntervention\\AddIntervention.js":"12","D:\\NeurosurgeryStatistics\\client\\src\\InverventionBox\\InterventionBox.js":"13","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\GlialTumors.js":"14","D:\\NeurosurgeryStatistics\\client\\src\\PatientInterventionBox\\PatientsInterventionBox.js":"15","D:\\NeurosurgeryStatistics\\client\\src\\EditIntervention\\EditIntervention.js":"16","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\Interventions.js":"17","D:\\NeurosurgeryStatistics\\client\\src\\Patients\\Patients.js":"18","D:\\NeurosurgeryStatistics\\client\\src\\PatientBox\\PatientBox.js":"19","D:\\NeurosurgeryStatistics\\client\\src\\EditPatient\\EditPatient.js":"20","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\InterventionHeader.js":"21","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Statistics.js":"22","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\DataSelection\\DataSelection.js":"23","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DatebaseSelector.js":"24","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DateSelection.js":"25","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DataDisplay.js":"26","D:\\NeurosurgeryStatistics\\client\\src\\API\\GetInterventionList.js":"27"},{"size":209,"mtime":1611686378335,"results":"28","hashOfConfig":"29"},{"size":921,"mtime":1612419448627,"results":"30","hashOfConfig":"29"},{"size":872,"mtime":1612419399069,"results":"31","hashOfConfig":"29"},{"size":539,"mtime":1611689426463,"results":"32","hashOfConfig":"29"},{"size":119,"mtime":1611764633580,"results":"33","hashOfConfig":"29"},{"size":268,"mtime":1611762051687,"results":"34","hashOfConfig":"29"},{"size":3322,"mtime":1612256214377,"results":"35","hashOfConfig":"29"},{"size":2760,"mtime":1612173596801,"results":"36","hashOfConfig":"29"},{"size":332,"mtime":1612419265500,"results":"37","hashOfConfig":"29"},{"size":234,"mtime":1611762019906,"results":"38","hashOfConfig":"29"},{"size":295,"mtime":1611762034325,"results":"39","hashOfConfig":"29"},{"size":4961,"mtime":1612184022565,"results":"40","hashOfConfig":"29"},{"size":1188,"mtime":1612185966649,"results":"41","hashOfConfig":"29"},{"size":683,"mtime":1612419263344,"results":"42","hashOfConfig":"29"},{"size":2282,"mtime":1612417736245,"results":"43","hashOfConfig":"29"},{"size":3797,"mtime":1612417442230,"results":"44","hashOfConfig":"29"},{"size":5340,"mtime":1612419173556,"results":"45","hashOfConfig":"29"},{"size":3709,"mtime":1612418866666,"results":"46","hashOfConfig":"29"},{"size":1721,"mtime":1612256526392,"results":"47","hashOfConfig":"29"},{"size":2651,"mtime":1612252955952,"results":"48","hashOfConfig":"29"},{"size":876,"mtime":1612419191361,"results":"49","hashOfConfig":"29"},{"size":2801,"mtime":1612434584179,"results":"50","hashOfConfig":"29"},{"size":1384,"mtime":1612782695824,"results":"51","hashOfConfig":"29"},{"size":920,"mtime":1612434659437,"results":"52","hashOfConfig":"29"},{"size":810,"mtime":1612768454191,"results":"53","hashOfConfig":"29"},{"size":1669,"mtime":1612782245893,"results":"54","hashOfConfig":"29"},{"size":1162,"mtime":1612782569091,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"177pj6a",{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\NeurosurgeryStatistics\\client\\src\\index.js",[],["126","127"],"D:\\NeurosurgeryStatistics\\client\\src\\App.js",["128","129"],"import './App.css'\nimport { Navigation } from './Navigation/Navigation'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { theme } from './Theme/ThemeProvider'\nimport { AddPatient } from './AddPatient/AddPatient'\nimport NewEntry from './NewEntry/NewEntry'\nimport { Interventions } from './Interventions/Interventions'\nimport { Patients } from './Patients/Patients'\nimport { Statistics } from './Statistics/Statistics'\nfunction App() {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<Router>\n\t\t\t\t<Navigation />\n\t\t\t\t<div className='main-window'>\n\t\t\t\t\t<Route exact path='/' component={NewEntry} />\n\t\t\t\t\t<Route path='/interventions' component={Interventions} />\n\t\t\t\t\t<Route path='/patients' component={Patients} />\n\t\t\t\t\t<Route path='/statistics' component={Statistics} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ThemeProvider>\n\t)\n}\n\nexport default App\n","D:\\NeurosurgeryStatistics\\client\\src\\Navigation\\Navigation.js",["130","131"],"import React from 'react'\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\nimport { useStyles } from '../Theme/ThemeProvider'\r\n\r\nexport const Navigation = () => {\r\n\tconst classes = useStyles()\r\n\treturn (\r\n\t\t<AppBar position='static'>\r\n\t\t\t<Toolbar>\r\n\t\t\t\t<Typography>Neurosurgery Statistics</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/'>Home</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/patients'>Pacienti</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/interventions'>Interventii</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/statistics'>Statistica</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t</Toolbar>\r\n\t\t</AppBar>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Theme\\ThemeProvider.js",["132"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n\tmenubutton: {\r\n\t\tflexGrow: 0,\r\n\t\tpadding: '10px',\r\n\t},\r\n}))\r\n\r\nexport const theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: {\r\n\t\t\tlight: '#757ce8',\r\n\t\t\tmain: '#009688',\r\n\t\t\tdark: '#002884',\r\n\t\t\tcontrastText: '#fff',\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tlight: '#ff7961',\r\n\t\t\tmain: '#f44336',\r\n\t\t\tdark: '#ba000d',\r\n\t\t\tcontrastText: '#000',\r\n\t\t},\r\n\t},\r\n})\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Datebases.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\PostAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\AddPatient\\AddPatient.js",["133","134"],"import { Button, Grid, TextField, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { PostAPI } from '../API/PostAPI'\r\n\r\nexport var PatientData = {}\r\n\r\nexport const AddPatient = () => {\r\n\tconst [Patient, setPatient] = useState({\r\n\t\t_id: '',\r\n\t\tdb: 'GLIAL TUMORS',\r\n\t\tNume: '',\r\n\t\tPrenume: '',\r\n\t\tCNP: '',\r\n\t\tDataDeNastere: '',\r\n\t\tSex: '',\r\n\t\tVarsta: '',\r\n\t})\r\n\tconst [response, setResponse] = useState()\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tconst sexInd = Patient.CNP.slice(0, 1)\r\n\t\tconst year = Patient.CNP.slice(1, 3)\r\n\t\tconst month = parseInt(Patient.CNP.slice(3, 5))\r\n\t\tconst date = Patient.CNP.slice(5, 7)\r\n\t\tPatient.Sex = sexInd % 2 == 1 ? 'Masculin' : 'Feminin'\r\n\t\tPatient.DataDeNastere = new Date(year, month - 1, date)\r\n\t\tPatient._id = Patient.CNP\r\n\t\tconst today = new Date()\r\n\t\tconst ddate = Math.floor(\r\n\t\t\t(today.getTime() - Patient.DataDeNastere.getTime()) /\r\n\t\t\t\t(1000 * 3600 * 24 * 365.25)\r\n\t\t)\r\n\t\tPatient.Varsta = ddate\r\n\r\n\t\tPostAPI({ pathName: '/patient/add', data: Patient })\r\n\t\t\t.then(res => {\r\n\t\t\t\t{\r\n\t\t\t\t\tPatientData = Patient\r\n\t\t\t\t}\r\n\t\t\t\tsetResponse(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Typography>Nume: {Patient.Nume}</Typography>\r\n\t\t\t\t\t\t<Typography>Prenume: {Patient.Prenume}</Typography>\r\n\t\t\t\t\t\t<Typography>CNP: {Patient.CNP}</Typography>\r\n\t\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t\tData de nastere: {Patient.DataDeNastere.toJSON().slice(0, 10)}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography>Sex: {Patient.Sex}</Typography>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tsetResponse(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Typography>{JSON.stringify(err.message)}</Typography>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className='input-form' onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container spacing={2} alignItems='flex-end'>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\tvalue={Patient.db}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('db')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Nume'\r\n\t\t\t\t\t\t\tvalue={Patient.Nume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Nume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Prenume'\r\n\t\t\t\t\t\t\tvalue={Patient.Prenume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Prenume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='CNP'\r\n\t\t\t\t\t\t\tvalue={Patient.CNP}\r\n\t\t\t\t\t\t\tonChange={handleChange('CNP')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADAUGA PACIENT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\t\t\t<div>{response}</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\NewEntry\\NewEntry.js",["135"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport StepContent from '@material-ui/core/StepContent'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { AddPatient, PatientData } from '../AddPatient/AddPatient'\r\nimport { AddIntervention } from '../AddIntervention/AddIntervention'\r\nimport { AllInterventions } from '../InverventionBox/InterventionBox'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tbutton: {\r\n\t\tmarginTop: theme.spacing(1),\r\n\t\tmarginRight: theme.spacing(1),\r\n\t},\r\n\tactionsContainer: {\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tresetContainer: {\r\n\t\tpadding: theme.spacing(3),\r\n\t},\r\n}))\r\n\r\nfunction getSteps() {\r\n\treturn ['Adauga Pacient', 'Adauga Interventii']\r\n}\r\n\r\nfunction getStepContent(step) {\r\n\tswitch (step) {\r\n\t\tcase 0:\r\n\t\t\treturn <AddPatient />\r\n\t\tcase 1:\r\n\t\t\treturn <AddIntervention Patient={PatientData} />\r\n\t\tdefault:\r\n\t\t\treturn 'Unknown step'\r\n\t}\r\n}\r\n\r\nexport default function NewEntry() {\r\n\tconst classes = useStyles()\r\n\tconst [activeStep, setActiveStep] = React.useState(0)\r\n\tconst steps = getSteps()\r\n\r\n\tconst handleNext = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep + 1)\r\n\t}\r\n\r\n\tconst handleBack = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep - 1)\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetActiveStep(0)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Stepper activeStep={activeStep} orientation='vertical'>\r\n\t\t\t\t{steps.map((label, index) => (\r\n\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\r\n\t\t\t\t\t\t<StepContent>\r\n\t\t\t\t\t\t\t<Typography>{getStepContent(index)}</Typography>\r\n\t\t\t\t\t\t\t<div className={classes.actionsContainer}>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tdisabled={activeStep === 0}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleBack}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleNext}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</StepContent>\r\n\t\t\t\t\t</Step>\r\n\t\t\t\t))}\r\n\t\t\t</Stepper>\r\n\t\t\t{activeStep === steps.length && (\r\n\t\t\t\t<Paper square elevation={0} className={classes.resetContainer}>\r\n\t\t\t\t\t<Typography>All steps completed - you&apos;re finished</Typography>\r\n\t\t\t\t\t<Button onClick={handleReset} className={classes.button}>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Paper>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Localisations.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\GetAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\DeleteAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\AddIntervention\\AddIntervention.js",["136","137","138","139","140"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tPaper,\r\n\tSelect,\r\n\tTextField,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { Localisation } from '../Resources/Localisations'\r\nimport { GlialTumors } from '../Resources/GlialTumors'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { getDisplayDate } from '@material-ui/pickers/_helpers/text-field-helper'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\n\r\nexport const AddIntervention = ({ Patient }) => {\r\n\tconst [cnp, setCnp] = useState()\r\n\tconst [interventionList, setInterventionList] = useState([])\r\n\tconst [selectedDate, setSelectedDate] = useState(new Date())\r\n\tconst [newIntervention, setNewIntervention] = useState({\r\n\t\tdb: Patient.db,\r\n\t\tCNP: Patient.CNP,\r\n\t\tHistopathology: 'Glioblastoma',\r\n\t\tDate: '',\r\n\t\tLocalisation: 'FRONTAL',\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tsetNewIntervention(values => ({ ...values, ['Date']: selectedDate }))\r\n\t}, [selectedDate])\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t}, [])\r\n\r\n\tasync function GetData() {\r\n\t\tconst data = await GetAPI({ pathName: `/intervention/${Patient.CNP}` })\r\n\t\tconsole.log(data.data)\r\n\t\tsetInterventionList(data.data)\r\n\t}\r\n\r\n\tconst handleDateChange = date => {\r\n\t\tsetSelectedDate(value => (value = date))\r\n\t}\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewIntervention(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\t// await setNewIntervention(value => ({\r\n\t\t// \t...value,\r\n\t\t// \t['Date']: selectedDate,\r\n\t\t// }))\r\n\t\tconsole.log(newIntervention)\r\n\t\tawait PostAPI({ pathName: `/intervention/add`, data: newIntervention })\r\n\t\tGetData()\r\n\t}\r\n\r\n\tfunction handleEdit(id) {}\r\n\r\n\tasync function handleDelete(id) {\r\n\t\tawait DeleteAPI({ pathName: `/intervention/${id}` })\r\n\t\tGetData()\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<TextField label='PatientCNP' value={Patient.CNP}></TextField>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='histopathology-select-label'>\r\n\t\t\t\t\t\t\t\tHistopathology\r\n\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='histopathology-select-label'\r\n\t\t\t\t\t\t\t\tid='histopathology-select'\r\n\t\t\t\t\t\t\t\tvalue={newIntervention.Histopathology}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('Histopathology')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{GlialTumors.map(loc => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={loc} key={loc}>\r\n\t\t\t\t\t\t\t\t\t\t\t{loc}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='localisation-select-label'>\r\n\t\t\t\t\t\t\t\tLocalisation\r\n\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='localisation-select-label'\r\n\t\t\t\t\t\t\t\tid='localisation-select'\r\n\t\t\t\t\t\t\t\tvalue={newIntervention.Localisation}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('Localisation')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{Localisation.map(loc => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={loc} key={loc}>\r\n\t\t\t\t\t\t\t\t\t\t\t{loc}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\tid='date-picker-inline'\r\n\t\t\t\t\t\t\t\tlabel='Data interventiei'\r\n\t\t\t\t\t\t\t\tvalue={selectedDate}\r\n\t\t\t\t\t\t\t\tonChange={handleDateChange}\r\n\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\r\n\t\t\t<Grid container direction='row' spacing={2}>\r\n\t\t\t\t{interventionList.map(intervention => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t{intervention.Histopathology}\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t{intervention.Localisation}\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t{intervention.Date.toString().slice(0, 10)}\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleEdit(intervention._id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleDelete(intervention._id)}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\InverventionBox\\InterventionBox.js",["141","142","143"],"import { Button, Grid, makeStyles, Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\n\r\nexport const InterventionBox = ({ intervention }) => {\r\n\tfunction handleEdit(id) {\r\n\t\tPostAPI({ pathName: `/intervention/update/${id}`, data: '' })\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/intervention/${id}` })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Histopathology}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Localisation}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Date.toString().slice(0, 10)}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleEdit(intervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(intervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\GlialTumors.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\PatientInterventionBox\\PatientsInterventionBox.js",["144","145","146","147","148"],"import { Button, Grid, makeStyles, Paper, TextField } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { EditIntervention } from '../EditIntervention/EditIntervention'\r\n\r\nexport const PatientsInterventionBox = ({\r\n\tintervention,\r\n\tsetRefresh,\r\n\tsetInt,\r\n}) => {\r\n\tconst [edit, setEdit] = useState(false)\r\n\tconst [newIntervention, setNewIntervention] = useState(intervention)\r\n\t//  useState({\r\n\t// \t_id: intervention._id,\r\n\t// \tdb: intervention.db,\r\n\t// \tCNP: intervention.CNP,\r\n\t// \tHistopathology: intervention.Histopathology,\r\n\t// \tLocalisation: intervention.Localisation,\r\n\t// \tDate: intervention.Date,\r\n\t// })\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewIntervention(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleEdit(id) {\r\n\t\tsetEdit(prev => !prev)\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/intervention/${id}` })\r\n\t\tsetRefresh(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Nume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Prenume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.CNP}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Sex}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Histopathology}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Localisation}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Date\r\n\t\t\t\t\t\t\t? newIntervention.Date.toString().slice(4, 15)\r\n\t\t\t\t\t\t\t: ''}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleEdit(newIntervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(newIntervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{edit ? (\r\n\t\t\t\t\t<EditIntervention\r\n\t\t\t\t\t\tintervention={newIntervention}\r\n\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\tsetDone={setEdit}\r\n\t\t\t\t\t\tsetInt={setNewIntervention}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\EditIntervention\\EditIntervention.js",["149","150","151","152","153"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tPaper,\r\n\tSelect,\r\n\tTextField,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { Localisation } from '../Resources/Localisations'\r\nimport { GlialTumors } from '../Resources/GlialTumors'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { getDisplayDate } from '@material-ui/pickers/_helpers/text-field-helper'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\n\r\nexport const EditIntervention = ({\r\n\tintervention,\r\n\tsetRefresh,\r\n\tsetDone,\r\n\tsetInt,\r\n}) => {\r\n\tconst [selectedDate, setSelectedDate] = useState(intervention.Date)\r\n\tconst [newIntervention, setNewIntervention] = useState(intervention)\r\n\t// useState({\r\n\t// \t_id: intervention._id,\r\n\t// \tdb: intervention.db,\r\n\t// \tCNP: intervention.CNP,\r\n\t// \tHistopathology: intervention.Histopathology,\r\n\t// \tDate: new Date(intervention.Date),\r\n\t// \tLocalisation: intervention.Localisation,\r\n\t// })\r\n\r\n\tuseEffect(() => {\r\n\t\tsetNewIntervention(values => ({ ...values, ['Date']: selectedDate }))\r\n\t}, [selectedDate])\r\n\r\n\tconst handleDateChange = date => {\r\n\t\tsetSelectedDate(value => (value = date))\r\n\t}\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewIntervention(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tconsole.log('new', newIntervention)\r\n\t\tsetInt(prev => (prev = newIntervention))\r\n\t\tconst res = PostAPI({\r\n\t\t\tpathName: `/intervention/update/${newIntervention._id}`,\r\n\t\t\tdata: newIntervention,\r\n\t\t})\r\n\t\tconsole.log(res)\r\n\t\t//setRefresh(true)\r\n\t\tsetDone(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='PatientCNP'\r\n\t\t\t\t\t\t\tvalue={newIntervention.CNP}\r\n\t\t\t\t\t\t></TextField>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='histopathology-select-label'>\r\n\t\t\t\t\t\t\t\tHistopathology\r\n\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='histopathology-select-label'\r\n\t\t\t\t\t\t\t\tid='histopathology-select'\r\n\t\t\t\t\t\t\t\tvalue={newIntervention.Histopathology}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('Histopathology')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{GlialTumors.map(loc => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={loc} key={loc}>\r\n\t\t\t\t\t\t\t\t\t\t\t{loc}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='localisation-select-label'>\r\n\t\t\t\t\t\t\t\tLocalisation\r\n\t\t\t\t\t\t\t</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='localisation-select-label'\r\n\t\t\t\t\t\t\t\tid='localisation-select'\r\n\t\t\t\t\t\t\t\tvalue={newIntervention.Localisation}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('Localisation')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{Localisation.map(loc => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={loc} key={loc}>\r\n\t\t\t\t\t\t\t\t\t\t\t{loc}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\tid='date-picker-inline'\r\n\t\t\t\t\t\t\t\tlabel='Data interventiei'\r\n\t\t\t\t\t\t\t\tvalue={selectedDate}\r\n\t\t\t\t\t\t\t\tonChange={handleDateChange}\r\n\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\Interventions.js",["154","155","156","157","158","159","160","161"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { PatientsInterventionBox } from '../PatientInterventionBox/PatientsInterventionBox'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport { InterventionHeader } from './InterventionHeader'\r\n\r\nexport const Interventions = () => {\r\n\tconst [datebaseSelected, setDatebaseSelected] = useState('GLIAL TUMORS')\r\n\tconst [interventionList, setInterventionList] = useState([])\r\n\tconst [selectedDate, setSelectedDate] = useState({\r\n\t\tstart: new Date(1990, 0, 1),\r\n\t\tend: new Date(),\r\n\t})\r\n\tconst [prop, setProp] = useState('Date')\r\n\tconst [refresh, setRefresh] = useState(false)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [elementsPerPage, setElementsPerPage] = useState(20)\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t\tsetRefresh(false)\r\n\t}, [refresh])\r\n\r\n\tconst handleDateChange = prop => date => {\r\n\t\tsetSelectedDate(value => ({ ...value, [prop]: date }))\r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\tfunction handlePageChange(event, value) {\r\n\t\tsetCurrentPage(prev => (prev = value))\r\n\t}\r\n\r\n\tasync function GetData() {\r\n\t\tconst data = await GetAPI({ pathName: `/intervention/bypat` })\r\n\t\tconst filtered = data.data.filter(el => {\r\n\t\t\tel.Date = new Date(el.Date)\r\n\t\t\tif (\r\n\t\t\t\tel.db == datebaseSelected &&\r\n\t\t\t\t+el.Date.getTime() >= +selectedDate.start.getTime() &&\r\n\t\t\t\t+el.Date.getTime() <= +selectedDate.end.getTime()\r\n\t\t\t)\r\n\t\t\t\treturn el\r\n\t\t})\r\n\t\tconst res = orderList(filtered, prop)\r\n\r\n\t\tsetInterventionList(values => (values = res))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tGetData()\r\n\t}\r\n\r\n\tfunction orderList(array, prop) {\r\n\t\tfunction dynamicSort(property) {\r\n\t\t\tvar sortOrder = 1\r\n\t\t\tif (property[0] === '-') {\r\n\t\t\t\tsortOrder = -1\r\n\t\t\t\tproperty = property.substr(1)\r\n\t\t\t}\r\n\t\t\treturn function (a, b) {\r\n\t\t\t\t/* next line works with strings and numbers,\r\n\t\t\t\t * and you may want to customize it to your needs\r\n\t\t\t\t */\r\n\t\t\t\tif (prop == 'Date') {\r\n\t\t\t\t\ta[property] = new Date(a[property])\r\n\t\t\t\t\tb[property] = new Date(b[property])\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result =\r\n\t\t\t\t\ta[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0\r\n\t\t\t\treturn result * sortOrder\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array.sort(dynamicSort(prop))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid container direction='row'>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Grid container style={{ padding: '1rem' }} alignItems='center'>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\t\tvalue={datebaseSelected}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\t\tid='start-date-picker-inline'\r\n\t\t\t\t\t\t\t\t\tlabel='Start Period'\r\n\t\t\t\t\t\t\t\t\tvalue={selectedDate.start}\r\n\t\t\t\t\t\t\t\t\tonChange={handleDateChange('start')}\r\n\t\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\t\tid='end-date-picker-inline'\r\n\t\t\t\t\t\t\t\t\tlabel='End period'\r\n\t\t\t\t\t\t\t\t\tvalue={selectedDate.end}\r\n\t\t\t\t\t\t\t\t\tonChange={handleDateChange('end')}\r\n\t\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Button variant='contained' type='submit'>\r\n\t\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tdirection='row'\r\n\t\t\t\tspacing={2}\r\n\t\t\t\tstyle={{ marginLeft: '1rem', marginRight: '1rem' }}\r\n\t\t\t>\r\n\t\t\t\t<InterventionHeader />\r\n\t\t\t\t{interventionList.map((el, index) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tindex > (currentPage - 1) * elementsPerPage &&\r\n\t\t\t\t\t\tindex <= currentPage * elementsPerPage\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<PatientsInterventionBox\r\n\t\t\t\t\t\t\t\tintervention={el}\r\n\t\t\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container justify='center'>\r\n\t\t\t\t<Grid item justify='center'>\r\n\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\tcount={Math.ceil(interventionList.length / elementsPerPage)}\r\n\t\t\t\t\t\tpage={currentPage}\r\n\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\tonChange={handlePageChange}\r\n\t\t\t\t\t\tstyle={{ margin: '2rem' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Patients\\Patients.js",["162","163","164","165","166","167","168","169","170","171","172"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { PatientBox } from '../PatientBox/PatientBox'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\n\r\nexport const Patients = () => {\r\n\tconst [datebaseSelected, setDatebaseSelected] = useState('GLIAL TUMORS')\r\n\tconst [patientList, setPatientList] = useState([])\r\n\tconst [selectedDate, setSelectedDate] = useState({\r\n\t\tstart: new Date(1990, 0, 1),\r\n\t\tend: new Date(),\r\n\t})\r\n\tconst [prop, setProp] = useState('Date')\r\n\tconst [refresh, setRefresh] = useState(false)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [elementsPerPage, setElementsPerPage] = useState(20)\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t\tsetRefresh(false)\r\n\t}, [refresh])\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\tfunction handlePageChange(event, value) {\r\n\t\tsetCurrentPage(prev => (prev = value))\r\n\t}\r\n\r\n\tasync function GetData() {\r\n\t\tconst data = await GetAPI({ pathName: `/patient` })\r\n\r\n\t\tconst res = orderList(data.data, prop)\r\n\t\tsetPatientList(values => (values = res))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tGetData()\r\n\t}\r\n\r\n\tfunction orderList(array, prop) {\r\n\t\tfunction dynamicSort(property) {\r\n\t\t\tvar sortOrder = 1\r\n\t\t\tif (property[0] === '-') {\r\n\t\t\t\tsortOrder = -1\r\n\t\t\t\tproperty = property.substr(1)\r\n\t\t\t}\r\n\t\t\treturn function (a, b) {\r\n\t\t\t\t/* next line works with strings and numbers,\r\n\t\t\t\t * and you may want to customize it to your needs\r\n\t\t\t\t */\r\n\t\t\t\tif (prop == 'Date') {\r\n\t\t\t\t\ta[property] = new Date(a[property])\r\n\t\t\t\t\tb[property] = new Date(b[property])\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result =\r\n\t\t\t\t\ta[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0\r\n\t\t\t\treturn result * sortOrder\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn array.sort(dynamicSort(prop))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid container direction='row'>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Grid container style={{ padding: '1rem' }} alignItems='center'>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\t\tvalue={datebaseSelected}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Button variant='contained' type='submit'>\r\n\t\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tdirection='row'\r\n\t\t\t\tspacing={2}\r\n\t\t\t\tstyle={{ marginLeft: '1rem', marginRight: '1rem' }}\r\n\t\t\t>\r\n\t\t\t\t{patientList.map((el, index) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tindex > (currentPage - 1) * elementsPerPage &&\r\n\t\t\t\t\t\tindex <= currentPage * elementsPerPage\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\treturn <PatientBox patient={el} setRefresh={setRefresh} />\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container justify='center'>\r\n\t\t\t\t<Grid item justify='center'>\r\n\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\tcount={Math.ceil(patientList.length / elementsPerPage)}\r\n\t\t\t\t\t\tpage={currentPage}\r\n\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\tonChange={handlePageChange}\r\n\t\t\t\t\t\tstyle={{ margin: '2rem' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\PatientBox\\PatientBox.js",["173","174","175","176","177"],"import { Button, Grid, makeStyles, Paper, TextField } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { EditPatient } from '../EditPatient/EditPatient'\r\n\r\nexport const PatientBox = ({ patient, setRefresh }) => {\r\n\tconst [edit, setEdit] = useState(false)\r\n\tconst [newPatient, setNewPatient] = useState(patient)\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleEdit(id) {\r\n\t\tsetEdit(prev => !prev)\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/patient/${id}` })\r\n\t\tsetRefresh(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.Nume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.Prenume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.CNP}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.DataDeNastere}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.Sex}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{patient.Varsta}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' onClick={() => handleEdit(patient._id)}>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(patient._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{edit ? (\r\n\t\t\t\t\t<EditPatient\r\n\t\t\t\t\t\tpatient={newPatient}\r\n\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\tsetDone={setEdit}\r\n\t\t\t\t\t\tsetInt={setNewPatient}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\EditPatient\\EditPatient.js",["178","179","180","181","182","183","184","185","186","187"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tPaper,\r\n\tSelect,\r\n\tTextField,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { Localisation } from '../Resources/Localisations'\r\nimport { GlialTumors } from '../Resources/GlialTumors'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { getDisplayDate } from '@material-ui/pickers/_helpers/text-field-helper'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\n\r\nexport const EditPatient = ({ Patient, setRefresh, setDone, setInt }) => {\r\n\tconst [newPatient, setNewPatient] = useState({\r\n\t\t_id: Patient._id,\r\n\t\tdb: Patient.db,\r\n\t\tCNP: Patient.CNP,\r\n\t\tNume: Patient.Nume,\r\n\t\tPrenume: Patient.Prenume,\r\n\t\tSex: Patient.Sex,\r\n\t\tDataDeNastere: Patient.DataDeNastere,\r\n\t})\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tconsole.log('new', newPatient)\r\n\t\tsetInt(prev => newPatient)\r\n\t\tconst res = PostAPI({\r\n\t\t\tpathName: `/Patient/update/${newPatient._id}`,\r\n\t\t\tdata: newPatient,\r\n\t\t})\r\n\t\tconsole.log(res)\r\n\t\tsetRefresh(true)\r\n\t\tsetDone(false)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\tvalue={Patient.db}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('db')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Nume'\r\n\t\t\t\t\t\t\tvalue={Patient.Nume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Nume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Prenume'\r\n\t\t\t\t\t\t\tvalue={Patient.Prenume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Prenume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='CNP'\r\n\t\t\t\t\t\t\tvalue={Patient.CNP}\r\n\t\t\t\t\t\t\tonChange={handleChange('CNP')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\InterventionHeader.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Statistics.js",["188","189","190","191","192","193"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { DataSelection } from './DataSelection/DataSelection'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tbutton: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t},\r\n\tinstructions: {\r\n\t\tmarginTop: theme.spacing(1),\r\n\t\tmarginBottom: theme.spacing(1),\r\n\t},\r\n}))\r\n\r\nfunction getSteps() {\r\n\treturn ['Selecteaza datele dorite', 'Rezultate']\r\n}\r\n\r\nfunction getStepContent(step) {\r\n\tswitch (step) {\r\n\t\tcase 0:\r\n\t\t\treturn <DataSelection />\r\n\t\tcase 1:\r\n\t\t\treturn 'What is an ad group anyways?'\r\n\t\tcase 2:\r\n\t\t\treturn 'This is the bit I really care about!'\r\n\t\tdefault:\r\n\t\t\treturn 'Unknown step'\r\n\t}\r\n}\r\n\r\nexport const Statistics = () => {\r\n\tconst classes = useStyles()\r\n\tconst [activeStep, setActiveStep] = React.useState(0)\r\n\tconst [skipped, setSkipped] = React.useState(new Set())\r\n\tconst steps = getSteps()\r\n\r\n\tconst [filer, setFilter] = useState({\r\n\t\tdb: 'GLIAL TUMORS',\r\n\t\tstart: new Date(1990, 0, 1),\r\n\t\tend: new Date(),\r\n\t})\r\n\tconst [dataSet, setDateSet] = useState([])\r\n\r\n\tconst handleNext = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep + 1)\r\n\t}\r\n\r\n\tconst handleBack = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep - 1)\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetActiveStep(0)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Stepper activeStep={activeStep}>\r\n\t\t\t\t{steps.map((label, index) => {\r\n\t\t\t\t\tconst stepProps = {}\r\n\t\t\t\t\tconst labelProps = {}\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Step key={label} {...stepProps}>\r\n\t\t\t\t\t\t\t<StepLabel {...labelProps}>{label}</StepLabel>\r\n\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Stepper>\r\n\t\t\t<div>\r\n\t\t\t\t{activeStep === steps.length ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Typography className={classes.instructions}>\r\n\t\t\t\t\t\t\tAll steps completed - you&apos;re finished\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Button onClick={handleReset} className={classes.button}>\r\n\t\t\t\t\t\t\tReset\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Typography className={classes.instructions}>\r\n\t\t\t\t\t\t\t{getStepContent(activeStep)}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tdisabled={activeStep === 0}\r\n\t\t\t\t\t\t\t\tonClick={handleBack}\r\n\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\tonClick={handleNext}\r\n\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\DataSelection\\DataSelection.js",["194"],"D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DatebaseSelector.js",["195"],"import {\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\n\r\nexport const DatebaseSelector = ({ datebaseSelected, setDatebaseSelected }) => {\r\n\tconst [currentDatebase, setCurrentDatebase] = useState(datebaseSelected)\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t\tsetCurrentDatebase(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FormControl>\r\n\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t<Select\r\n\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\tid='datebase-select'\r\n\t\t\t\tvalue={currentDatebase}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t>\r\n\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Select>\r\n\t\t</FormControl>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DateSelection.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DataDisplay.js",["196","197"],"D:\\NeurosurgeryStatistics\\client\\src\\API\\GetInterventionList.js",["198","199","200"],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":3,"column":42,"nodeType":"207","messageId":"208","endLine":3,"endColumn":46},{"ruleId":"205","severity":1,"message":"209","line":6,"column":10,"nodeType":"207","messageId":"208","endLine":6,"endColumn":20},{"ruleId":"205","severity":1,"message":"210","line":3,"column":27,"nodeType":"207","messageId":"208","endLine":3,"endColumn":33},{"ruleId":"205","severity":1,"message":"211","line":3,"column":35,"nodeType":"207","messageId":"208","endLine":3,"endColumn":40},{"ruleId":"205","severity":1,"message":"212","line":1,"column":8,"nodeType":"207","messageId":"208","endLine":1,"endColumn":13},{"ruleId":"213","severity":1,"message":"214","line":35,"column":28,"nodeType":"215","messageId":"216","endLine":35,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":47,"column":5,"nodeType":"219","messageId":"220","endLine":49,"endColumn":6},{"ruleId":"205","severity":1,"message":"221","line":12,"column":10,"nodeType":"207","messageId":"208","endLine":12,"endColumn":26},{"ruleId":"205","severity":1,"message":"222","line":21,"column":10,"nodeType":"207","messageId":"208","endLine":21,"endColumn":24},{"ruleId":"205","severity":1,"message":"223","line":25,"column":9,"nodeType":"207","messageId":"208","endLine":25,"endColumn":12},{"ruleId":"205","severity":1,"message":"224","line":25,"column":14,"nodeType":"207","messageId":"208","endLine":25,"endColumn":20},{"ruleId":"225","severity":1,"message":"226","line":37,"column":46,"nodeType":"227","messageId":"228","endLine":37,"endColumn":68,"fix":"229"},{"ruleId":"230","severity":1,"message":"231","line":42,"column":5,"nodeType":"232","endLine":42,"endColumn":7,"suggestions":"233"},{"ruleId":"205","severity":1,"message":"234","line":1,"column":24,"nodeType":"207","messageId":"208","endLine":1,"endColumn":34},{"ruleId":"205","severity":1,"message":"235","line":2,"column":17,"nodeType":"207","messageId":"208","endLine":2,"endColumn":26},{"ruleId":"205","severity":1,"message":"236","line":2,"column":28,"nodeType":"207","messageId":"208","endLine":2,"endColumn":36},{"ruleId":"205","severity":1,"message":"234","line":1,"column":24,"nodeType":"207","messageId":"208","endLine":1,"endColumn":34},{"ruleId":"205","severity":1,"message":"237","line":1,"column":43,"nodeType":"207","messageId":"208","endLine":1,"endColumn":52},{"ruleId":"205","severity":1,"message":"235","line":2,"column":17,"nodeType":"207","messageId":"208","endLine":2,"endColumn":26},{"ruleId":"205","severity":1,"message":"238","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":17},{"ruleId":"205","severity":1,"message":"239","line":23,"column":8,"nodeType":"207","messageId":"208","endLine":23,"endColumn":20},{"ruleId":"205","severity":1,"message":"240","line":7,"column":2,"nodeType":"207","messageId":"208","endLine":7,"endColumn":7},{"ruleId":"205","severity":1,"message":"241","line":20,"column":10,"nodeType":"207","messageId":"208","endLine":20,"endColumn":16},{"ruleId":"205","severity":1,"message":"222","line":21,"column":10,"nodeType":"207","messageId":"208","endLine":21,"endColumn":24},{"ruleId":"205","severity":1,"message":"242","line":22,"column":10,"nodeType":"207","messageId":"208","endLine":22,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":42,"column":46,"nodeType":"227","messageId":"228","endLine":42,"endColumn":68,"fix":"243"},{"ruleId":"205","severity":1,"message":"244","line":28,"column":15,"nodeType":"207","messageId":"208","endLine":28,"endColumn":22},{"ruleId":"205","severity":1,"message":"245","line":31,"column":26,"nodeType":"207","messageId":"208","endLine":31,"endColumn":44},{"ruleId":"230","severity":1,"message":"231","line":35,"column":5,"nodeType":"232","endLine":35,"endColumn":7,"suggestions":"246"},{"ruleId":"230","severity":1,"message":"231","line":40,"column":5,"nodeType":"232","endLine":40,"endColumn":14,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":56,"column":40,"nodeType":"250","messageId":"251","endLine":56,"endColumn":42},{"ruleId":"213","severity":1,"message":"214","line":59,"column":11,"nodeType":"215","messageId":"216","endLine":59,"endColumn":13},{"ruleId":"213","severity":1,"message":"214","line":86,"column":14,"nodeType":"215","messageId":"216","endLine":86,"endColumn":16},{"ruleId":"248","severity":1,"message":"252","line":172,"column":39,"nodeType":"250","messageId":"251","endLine":172,"endColumn":41},{"ruleId":"205","severity":1,"message":"253","line":9,"column":8,"nodeType":"207","messageId":"208","endLine":9,"endColumn":20},{"ruleId":"205","severity":1,"message":"254","line":11,"column":2,"nodeType":"207","messageId":"208","endLine":11,"endColumn":20},{"ruleId":"205","severity":1,"message":"255","line":12,"column":2,"nodeType":"207","messageId":"208","endLine":12,"endColumn":25},{"ruleId":"205","severity":1,"message":"256","line":23,"column":9,"nodeType":"207","messageId":"208","endLine":23,"endColumn":21},{"ruleId":"205","severity":1,"message":"257","line":23,"column":23,"nodeType":"207","messageId":"208","endLine":23,"endColumn":38},{"ruleId":"205","severity":1,"message":"244","line":27,"column":15,"nodeType":"207","messageId":"208","endLine":27,"endColumn":22},{"ruleId":"205","severity":1,"message":"245","line":30,"column":26,"nodeType":"207","messageId":"208","endLine":30,"endColumn":44},{"ruleId":"230","severity":1,"message":"231","line":34,"column":5,"nodeType":"232","endLine":34,"endColumn":7,"suggestions":"258"},{"ruleId":"230","severity":1,"message":"231","line":39,"column":5,"nodeType":"232","endLine":39,"endColumn":14,"suggestions":"259"},{"ruleId":"213","severity":1,"message":"214","line":72,"column":14,"nodeType":"215","messageId":"216","endLine":72,"endColumn":16},{"ruleId":"248","severity":1,"message":"252","line":124,"column":34,"nodeType":"250","messageId":"251","endLine":124,"endColumn":36},{"ruleId":"205","severity":1,"message":"234","line":1,"column":24,"nodeType":"207","messageId":"208","endLine":1,"endColumn":34},{"ruleId":"205","severity":1,"message":"237","line":1,"column":43,"nodeType":"207","messageId":"208","endLine":1,"endColumn":52},{"ruleId":"205","severity":1,"message":"235","line":2,"column":17,"nodeType":"207","messageId":"208","endLine":2,"endColumn":26},{"ruleId":"205","severity":1,"message":"238","line":4,"column":10,"nodeType":"207","messageId":"208","endLine":4,"endColumn":17},{"ruleId":"205","severity":1,"message":"239","line":11,"column":8,"nodeType":"207","messageId":"208","endLine":11,"endColumn":20},{"ruleId":"205","severity":1,"message":"240","line":7,"column":2,"nodeType":"207","messageId":"208","endLine":7,"endColumn":7},{"ruleId":"205","severity":1,"message":"235","line":11,"column":17,"nodeType":"207","messageId":"208","endLine":11,"endColumn":26},{"ruleId":"205","severity":1,"message":"253","line":12,"column":8,"nodeType":"207","messageId":"208","endLine":12,"endColumn":20},{"ruleId":"205","severity":1,"message":"260","line":13,"column":10,"nodeType":"207","messageId":"208","endLine":13,"endColumn":22},{"ruleId":"205","severity":1,"message":"261","line":14,"column":10,"nodeType":"207","messageId":"208","endLine":14,"endColumn":21},{"ruleId":"205","severity":1,"message":"254","line":16,"column":2,"nodeType":"207","messageId":"208","endLine":16,"endColumn":20},{"ruleId":"205","severity":1,"message":"255","line":17,"column":2,"nodeType":"207","messageId":"208","endLine":17,"endColumn":25},{"ruleId":"205","severity":1,"message":"241","line":20,"column":10,"nodeType":"207","messageId":"208","endLine":20,"endColumn":16},{"ruleId":"205","severity":1,"message":"222","line":21,"column":10,"nodeType":"207","messageId":"208","endLine":21,"endColumn":24},{"ruleId":"205","severity":1,"message":"242","line":22,"column":10,"nodeType":"207","messageId":"208","endLine":22,"endColumn":19},{"ruleId":"205","severity":1,"message":"262","line":43,"column":9,"nodeType":"207","messageId":"208","endLine":43,"endColumn":16},{"ruleId":"205","severity":1,"message":"263","line":43,"column":18,"nodeType":"207","messageId":"208","endLine":43,"endColumn":28},{"ruleId":"205","severity":1,"message":"264","line":46,"column":9,"nodeType":"207","messageId":"208","endLine":46,"endColumn":14},{"ruleId":"205","severity":1,"message":"265","line":46,"column":16,"nodeType":"207","messageId":"208","endLine":46,"endColumn":25},{"ruleId":"205","severity":1,"message":"266","line":51,"column":9,"nodeType":"207","messageId":"208","endLine":51,"endColumn":16},{"ruleId":"205","severity":1,"message":"267","line":51,"column":18,"nodeType":"207","messageId":"208","endLine":51,"endColumn":28},{"ruleId":"205","severity":1,"message":"268","line":12,"column":9,"nodeType":"207","messageId":"208","endLine":12,"endColumn":13},{"ruleId":"205","severity":1,"message":"269","line":3,"column":2,"nodeType":"207","messageId":"208","endLine":3,"endColumn":6},{"ruleId":"205","severity":1,"message":"270","line":27,"column":7,"nodeType":"207","messageId":"208","endLine":27,"endColumn":11},{"ruleId":"205","severity":1,"message":"271","line":40,"column":9,"nodeType":"207","messageId":"208","endLine":40,"endColumn":21},{"ruleId":"248","severity":1,"message":"249","line":7,"column":39,"nodeType":"250","messageId":"251","endLine":7,"endColumn":41},{"ruleId":"213","severity":1,"message":"214","line":10,"column":10,"nodeType":"215","messageId":"216","endLine":10,"endColumn":12},{"ruleId":"213","severity":1,"message":"214","line":33,"column":13,"nodeType":"215","messageId":"216","endLine":33,"endColumn":15},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'AddPatient' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'React' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'AllInterventions' is defined but never used.","'getDisplayDate' is defined but never used.","'cnp' is assigned a value but never used.","'setCnp' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['Date'] found.","Property","unnecessarilyComputedProperty",{"range":"274","text":"275"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.","ArrayExpression",["276"],"'makeStyles' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'TextField' is defined but never used.","'PostAPI' is defined but never used.","'handleChange' is assigned a value but never used.","'Paper' is defined but never used.","'GetAPI' is defined but never used.","'DeleteAPI' is defined but never used.",{"range":"277","text":"275"},"'setProp' is assigned a value but never used.","'setElementsPerPage' is assigned a value but never used.",["278"],["279"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'DateFnsUtils' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'selectedDate' is assigned a value but never used.","'setSelectedDate' is assigned a value but never used.",["280"],["281"],"'Localisation' is defined but never used.","'GlialTumors' is defined but never used.","'skipped' is assigned a value but never used.","'setSkipped' is assigned a value but never used.","'filer' is assigned a value but never used.","'setFilter' is assigned a value but never used.","'dataSet' is assigned a value but never used.","'setDateSet' is assigned a value but never used.","'data' is assigned a value but never used.","'Grid' is defined but never used.","'rows' is assigned a value but never used.","'selectedData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[1103,1111],"'Date'",{"desc":"282","fix":"283"},[1196,1204],{"desc":"282","fix":"284"},{"desc":"285","fix":"286"},{"desc":"282","fix":"287"},{"desc":"285","fix":"288"},"Update the dependencies array to be: [GetData]",{"range":"289","text":"290"},{"range":"291","text":"290"},"Update the dependencies array to be: [GetData, refresh]",{"range":"292","text":"293"},{"range":"294","text":"290"},{"range":"295","text":"293"},[1191,1193],"[GetData]",[1127,1129],[1192,1201],"[GetData, refresh]",[1015,1017],[1080,1089]]