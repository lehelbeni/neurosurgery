[{"D:\\NeurosurgeryStatistics\\client\\src\\index.js":"1","D:\\NeurosurgeryStatistics\\client\\src\\App.js":"2","D:\\NeurosurgeryStatistics\\client\\src\\Navigation\\Navigation.js":"3","D:\\NeurosurgeryStatistics\\client\\src\\Theme\\ThemeProvider.js":"4","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Datebases.js":"5","D:\\NeurosurgeryStatistics\\client\\src\\API\\PostAPI.js":"6","D:\\NeurosurgeryStatistics\\client\\src\\AddPatient\\AddPatient.js":"7","D:\\NeurosurgeryStatistics\\client\\src\\NewEntry\\NewEntry.js":"8","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Localisations.js":"9","D:\\NeurosurgeryStatistics\\client\\src\\API\\GetAPI.js":"10","D:\\NeurosurgeryStatistics\\client\\src\\API\\DeleteAPI.js":"11","D:\\NeurosurgeryStatistics\\client\\src\\AddIntervention\\AddIntervention.js":"12","D:\\NeurosurgeryStatistics\\client\\src\\InverventionBox\\InterventionBox.js":"13","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\GlialTumors.js":"14","D:\\NeurosurgeryStatistics\\client\\src\\PatientInterventionBox\\PatientsInterventionBox.js":"15","D:\\NeurosurgeryStatistics\\client\\src\\EditIntervention\\EditIntervention.js":"16","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\Interventions.js":"17","D:\\NeurosurgeryStatistics\\client\\src\\Patients\\Patients.js":"18","D:\\NeurosurgeryStatistics\\client\\src\\PatientBox\\PatientBox.js":"19","D:\\NeurosurgeryStatistics\\client\\src\\EditPatient\\EditPatient.js":"20","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\InterventionHeader.js":"21","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Statistics.js":"22","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\DataSelection\\DataSelection.js":"23","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DatebaseSelector.js":"24","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DateSelection.js":"25","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DataDisplay.js":"26","D:\\NeurosurgeryStatistics\\client\\src\\API\\GetInterventionList.js":"27","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\PatientsStats\\PatientStats.js":"28","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\LocalisationSelector.js":"29","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\InterventionStats\\InterventionStats.js":"30","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Methods\\FrequencyDistribution.js":"31","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Methods\\SortObject.js":"32"},{"size":209,"mtime":1611686378335,"results":"33","hashOfConfig":"34"},{"size":921,"mtime":1612419448627,"results":"35","hashOfConfig":"34"},{"size":872,"mtime":1612419399069,"results":"36","hashOfConfig":"34"},{"size":539,"mtime":1611689426463,"results":"37","hashOfConfig":"34"},{"size":119,"mtime":1611764633580,"results":"38","hashOfConfig":"34"},{"size":268,"mtime":1611762051687,"results":"39","hashOfConfig":"34"},{"size":3322,"mtime":1612256214377,"results":"40","hashOfConfig":"34"},{"size":2760,"mtime":1612173596801,"results":"41","hashOfConfig":"34"},{"size":333,"mtime":1613413019526,"results":"42","hashOfConfig":"34"},{"size":234,"mtime":1611762019906,"results":"43","hashOfConfig":"34"},{"size":295,"mtime":1611762034325,"results":"44","hashOfConfig":"34"},{"size":5023,"mtime":1613413564857,"results":"45","hashOfConfig":"34"},{"size":1188,"mtime":1612185966649,"results":"46","hashOfConfig":"34"},{"size":683,"mtime":1612419263344,"results":"47","hashOfConfig":"34"},{"size":2282,"mtime":1612417736245,"results":"48","hashOfConfig":"34"},{"size":3799,"mtime":1613413471791,"results":"49","hashOfConfig":"34"},{"size":5340,"mtime":1612419173556,"results":"50","hashOfConfig":"34"},{"size":3709,"mtime":1612418866666,"results":"51","hashOfConfig":"34"},{"size":1820,"mtime":1613412355797,"results":"52","hashOfConfig":"34"},{"size":2704,"mtime":1612977308507,"results":"53","hashOfConfig":"34"},{"size":876,"mtime":1612419191361,"results":"54","hashOfConfig":"34"},{"size":2843,"mtime":1613414657882,"results":"55","hashOfConfig":"34"},{"size":2831,"mtime":1613416114907,"results":"56","hashOfConfig":"34"},{"size":920,"mtime":1612434659437,"results":"57","hashOfConfig":"34"},{"size":830,"mtime":1613412767139,"results":"58","hashOfConfig":"34"},{"size":1389,"mtime":1612975876138,"results":"59","hashOfConfig":"34"},{"size":1098,"mtime":1612974981404,"results":"60","hashOfConfig":"34"},{"size":1194,"mtime":1612988515045,"results":"61","hashOfConfig":"34"},{"size":933,"mtime":1613413119774,"results":"62","hashOfConfig":"34"},{"size":1123,"mtime":1613418951679,"results":"63","hashOfConfig":"34"},{"size":208,"mtime":1613414601761,"results":"64","hashOfConfig":"34"},{"size":202,"mtime":1613415154680,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"177pj6a",{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"68"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"68"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"D:\\NeurosurgeryStatistics\\client\\src\\index.js",[],["146","147"],"D:\\NeurosurgeryStatistics\\client\\src\\App.js",["148","149"],"import './App.css'\nimport { Navigation } from './Navigation/Navigation'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport { theme } from './Theme/ThemeProvider'\nimport { AddPatient } from './AddPatient/AddPatient'\nimport NewEntry from './NewEntry/NewEntry'\nimport { Interventions } from './Interventions/Interventions'\nimport { Patients } from './Patients/Patients'\nimport { Statistics } from './Statistics/Statistics'\nfunction App() {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<Router>\n\t\t\t\t<Navigation />\n\t\t\t\t<div className='main-window'>\n\t\t\t\t\t<Route exact path='/' component={NewEntry} />\n\t\t\t\t\t<Route path='/interventions' component={Interventions} />\n\t\t\t\t\t<Route path='/patients' component={Patients} />\n\t\t\t\t\t<Route path='/statistics' component={Statistics} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ThemeProvider>\n\t)\n}\n\nexport default App\n","D:\\NeurosurgeryStatistics\\client\\src\\Navigation\\Navigation.js",["150","151"],"import React from 'react'\r\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\nimport { useStyles } from '../Theme/ThemeProvider'\r\n\r\nexport const Navigation = () => {\r\n\tconst classes = useStyles()\r\n\treturn (\r\n\t\t<AppBar position='static'>\r\n\t\t\t<Toolbar>\r\n\t\t\t\t<Typography>Neurosurgery Statistics</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/'>Home</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/patients'>Pacienti</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/interventions'>Interventii</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography className={classes.menubutton}>\r\n\t\t\t\t\t<Link to='/statistics'>Statistica</Link>\r\n\t\t\t\t</Typography>\r\n\t\t\t</Toolbar>\r\n\t\t</AppBar>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Theme\\ThemeProvider.js",["152"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n\tmenubutton: {\r\n\t\tflexGrow: 0,\r\n\t\tpadding: '10px',\r\n\t},\r\n}))\r\n\r\nexport const theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: {\r\n\t\t\tlight: '#757ce8',\r\n\t\t\tmain: '#009688',\r\n\t\t\tdark: '#002884',\r\n\t\t\tcontrastText: '#fff',\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tlight: '#ff7961',\r\n\t\t\tmain: '#f44336',\r\n\t\t\tdark: '#ba000d',\r\n\t\t\tcontrastText: '#000',\r\n\t\t},\r\n\t},\r\n})\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Datebases.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\PostAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\AddPatient\\AddPatient.js",["153","154"],"import { Button, Grid, TextField, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { PostAPI } from '../API/PostAPI'\r\n\r\nexport var PatientData = {}\r\n\r\nexport const AddPatient = () => {\r\n\tconst [Patient, setPatient] = useState({\r\n\t\t_id: '',\r\n\t\tdb: 'GLIAL TUMORS',\r\n\t\tNume: '',\r\n\t\tPrenume: '',\r\n\t\tCNP: '',\r\n\t\tDataDeNastere: '',\r\n\t\tSex: '',\r\n\t\tVarsta: '',\r\n\t})\r\n\tconst [response, setResponse] = useState()\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tconst sexInd = Patient.CNP.slice(0, 1)\r\n\t\tconst year = Patient.CNP.slice(1, 3)\r\n\t\tconst month = parseInt(Patient.CNP.slice(3, 5))\r\n\t\tconst date = Patient.CNP.slice(5, 7)\r\n\t\tPatient.Sex = sexInd % 2 == 1 ? 'Masculin' : 'Feminin'\r\n\t\tPatient.DataDeNastere = new Date(year, month - 1, date)\r\n\t\tPatient._id = Patient.CNP\r\n\t\tconst today = new Date()\r\n\t\tconst ddate = Math.floor(\r\n\t\t\t(today.getTime() - Patient.DataDeNastere.getTime()) /\r\n\t\t\t\t(1000 * 3600 * 24 * 365.25)\r\n\t\t)\r\n\t\tPatient.Varsta = ddate\r\n\r\n\t\tPostAPI({ pathName: '/patient/add', data: Patient })\r\n\t\t\t.then(res => {\r\n\t\t\t\t{\r\n\t\t\t\t\tPatientData = Patient\r\n\t\t\t\t}\r\n\t\t\t\tsetResponse(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Typography>Nume: {Patient.Nume}</Typography>\r\n\t\t\t\t\t\t<Typography>Prenume: {Patient.Prenume}</Typography>\r\n\t\t\t\t\t\t<Typography>CNP: {Patient.CNP}</Typography>\r\n\t\t\t\t\t\t<Typography>\r\n\t\t\t\t\t\t\tData de nastere: {Patient.DataDeNastere.toJSON().slice(0, 10)}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Typography>Sex: {Patient.Sex}</Typography>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tsetResponse(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Typography>{JSON.stringify(err.message)}</Typography>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className='input-form' onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container spacing={2} alignItems='flex-end'>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\tvalue={Patient.db}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('db')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Nume'\r\n\t\t\t\t\t\t\tvalue={Patient.Nume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Nume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Prenume'\r\n\t\t\t\t\t\t\tvalue={Patient.Prenume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Prenume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='CNP'\r\n\t\t\t\t\t\t\tvalue={Patient.CNP}\r\n\t\t\t\t\t\t\tonChange={handleChange('CNP')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADAUGA PACIENT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\t\t\t<div>{response}</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\NewEntry\\NewEntry.js",["155"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport StepContent from '@material-ui/core/StepContent'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { AddPatient, PatientData } from '../AddPatient/AddPatient'\r\nimport { AddIntervention } from '../AddIntervention/AddIntervention'\r\nimport { AllInterventions } from '../InverventionBox/InterventionBox'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tbutton: {\r\n\t\tmarginTop: theme.spacing(1),\r\n\t\tmarginRight: theme.spacing(1),\r\n\t},\r\n\tactionsContainer: {\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tresetContainer: {\r\n\t\tpadding: theme.spacing(3),\r\n\t},\r\n}))\r\n\r\nfunction getSteps() {\r\n\treturn ['Adauga Pacient', 'Adauga Interventii']\r\n}\r\n\r\nfunction getStepContent(step) {\r\n\tswitch (step) {\r\n\t\tcase 0:\r\n\t\t\treturn <AddPatient />\r\n\t\tcase 1:\r\n\t\t\treturn <AddIntervention Patient={PatientData} />\r\n\t\tdefault:\r\n\t\t\treturn 'Unknown step'\r\n\t}\r\n}\r\n\r\nexport default function NewEntry() {\r\n\tconst classes = useStyles()\r\n\tconst [activeStep, setActiveStep] = React.useState(0)\r\n\tconst steps = getSteps()\r\n\r\n\tconst handleNext = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep + 1)\r\n\t}\r\n\r\n\tconst handleBack = () => {\r\n\t\tsetActiveStep(prevActiveStep => prevActiveStep - 1)\r\n\t}\r\n\r\n\tconst handleReset = () => {\r\n\t\tsetActiveStep(0)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<Stepper activeStep={activeStep} orientation='vertical'>\r\n\t\t\t\t{steps.map((label, index) => (\r\n\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\r\n\t\t\t\t\t\t<StepContent>\r\n\t\t\t\t\t\t\t<Typography>{getStepContent(index)}</Typography>\r\n\t\t\t\t\t\t\t<div className={classes.actionsContainer}>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tdisabled={activeStep === 0}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleBack}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleNext}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</StepContent>\r\n\t\t\t\t\t</Step>\r\n\t\t\t\t))}\r\n\t\t\t</Stepper>\r\n\t\t\t{activeStep === steps.length && (\r\n\t\t\t\t<Paper square elevation={0} className={classes.resetContainer}>\r\n\t\t\t\t\t<Typography>All steps completed - you&apos;re finished</Typography>\r\n\t\t\t\t\t<Button onClick={handleReset} className={classes.button}>\r\n\t\t\t\t\t\tReset\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Paper>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\Localisations.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\GetAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\API\\DeleteAPI.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\AddIntervention\\AddIntervention.js",["156","157","158","159","160","161"],"D:\\NeurosurgeryStatistics\\client\\src\\InverventionBox\\InterventionBox.js",["162","163","164"],"import { Button, Grid, makeStyles, Paper } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\n\r\nexport const InterventionBox = ({ intervention }) => {\r\n\tfunction handleEdit(id) {\r\n\t\tPostAPI({ pathName: `/intervention/update/${id}`, data: '' })\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/intervention/${id}` })\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Histopathology}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Localisation}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{intervention.Date.toString().slice(0, 10)}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleEdit(intervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(intervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Resources\\GlialTumors.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\PatientInterventionBox\\PatientsInterventionBox.js",["165","166","167","168","169"],"import { Button, Grid, makeStyles, Paper, TextField } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { EditIntervention } from '../EditIntervention/EditIntervention'\r\n\r\nexport const PatientsInterventionBox = ({\r\n\tintervention,\r\n\tsetRefresh,\r\n\tsetInt,\r\n}) => {\r\n\tconst [edit, setEdit] = useState(false)\r\n\tconst [newIntervention, setNewIntervention] = useState(intervention)\r\n\t//  useState({\r\n\t// \t_id: intervention._id,\r\n\t// \tdb: intervention.db,\r\n\t// \tCNP: intervention.CNP,\r\n\t// \tHistopathology: intervention.Histopathology,\r\n\t// \tLocalisation: intervention.Localisation,\r\n\t// \tDate: intervention.Date,\r\n\t// })\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewIntervention(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleEdit(id) {\r\n\t\tsetEdit(prev => !prev)\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/intervention/${id}` })\r\n\t\tsetRefresh(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Nume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Prenume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.CNP}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Sex}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Histopathology}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Localisation}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newIntervention.Date\r\n\t\t\t\t\t\t\t? newIntervention.Date.toString().slice(4, 15)\r\n\t\t\t\t\t\t\t: ''}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleEdit(newIntervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(newIntervention._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{edit ? (\r\n\t\t\t\t\t<EditIntervention\r\n\t\t\t\t\t\tintervention={newIntervention}\r\n\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\tsetDone={setEdit}\r\n\t\t\t\t\t\tsetInt={setNewIntervention}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\EditIntervention\\EditIntervention.js",["170","171","172","173","174"],"D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\Interventions.js",["175","176","177","178","179","180","181","182"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { PatientsInterventionBox } from '../PatientInterventionBox/PatientsInterventionBox'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport { InterventionHeader } from './InterventionHeader'\r\n\r\nexport const Interventions = () => {\r\n\tconst [datebaseSelected, setDatebaseSelected] = useState('GLIAL TUMORS')\r\n\tconst [interventionList, setInterventionList] = useState([])\r\n\tconst [selectedDate, setSelectedDate] = useState({\r\n\t\tstart: new Date(1990, 0, 1),\r\n\t\tend: new Date(),\r\n\t})\r\n\tconst [prop, setProp] = useState('Date')\r\n\tconst [refresh, setRefresh] = useState(false)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [elementsPerPage, setElementsPerPage] = useState(20)\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t\tsetRefresh(false)\r\n\t}, [refresh])\r\n\r\n\tconst handleDateChange = prop => date => {\r\n\t\tsetSelectedDate(value => ({ ...value, [prop]: date }))\r\n\t}\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\tfunction handlePageChange(event, value) {\r\n\t\tsetCurrentPage(prev => (prev = value))\r\n\t}\r\n\r\n\tasync function GetData() {\r\n\t\tconst data = await GetAPI({ pathName: `/intervention/bypat` })\r\n\t\tconst filtered = data.data.filter(el => {\r\n\t\t\tel.Date = new Date(el.Date)\r\n\t\t\tif (\r\n\t\t\t\tel.db == datebaseSelected &&\r\n\t\t\t\t+el.Date.getTime() >= +selectedDate.start.getTime() &&\r\n\t\t\t\t+el.Date.getTime() <= +selectedDate.end.getTime()\r\n\t\t\t)\r\n\t\t\t\treturn el\r\n\t\t})\r\n\t\tconst res = orderList(filtered, prop)\r\n\r\n\t\tsetInterventionList(values => (values = res))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tGetData()\r\n\t}\r\n\r\n\tfunction orderList(array, prop) {\r\n\t\tfunction dynamicSort(property) {\r\n\t\t\tvar sortOrder = 1\r\n\t\t\tif (property[0] === '-') {\r\n\t\t\t\tsortOrder = -1\r\n\t\t\t\tproperty = property.substr(1)\r\n\t\t\t}\r\n\t\t\treturn function (a, b) {\r\n\t\t\t\t/* next line works with strings and numbers,\r\n\t\t\t\t * and you may want to customize it to your needs\r\n\t\t\t\t */\r\n\t\t\t\tif (prop == 'Date') {\r\n\t\t\t\t\ta[property] = new Date(a[property])\r\n\t\t\t\t\tb[property] = new Date(b[property])\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result =\r\n\t\t\t\t\ta[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0\r\n\t\t\t\treturn result * sortOrder\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array.sort(dynamicSort(prop))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid container direction='row'>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Grid container style={{ padding: '1rem' }} alignItems='center'>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\t\tvalue={datebaseSelected}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\t\tid='start-date-picker-inline'\r\n\t\t\t\t\t\t\t\t\tlabel='Start Period'\r\n\t\t\t\t\t\t\t\t\tvalue={selectedDate.start}\r\n\t\t\t\t\t\t\t\t\tonChange={handleDateChange('start')}\r\n\t\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n\t\t\t\t\t\t\t\t<KeyboardDatePicker\r\n\t\t\t\t\t\t\t\t\tdisableToolbar\r\n\t\t\t\t\t\t\t\t\tvariant='inline'\r\n\t\t\t\t\t\t\t\t\tformat='MM/dd/yyyy'\r\n\t\t\t\t\t\t\t\t\tmargin='normal'\r\n\t\t\t\t\t\t\t\t\tid='end-date-picker-inline'\r\n\t\t\t\t\t\t\t\t\tlabel='End period'\r\n\t\t\t\t\t\t\t\t\tvalue={selectedDate.end}\r\n\t\t\t\t\t\t\t\t\tonChange={handleDateChange('end')}\r\n\t\t\t\t\t\t\t\t\tKeyboardButtonProps={{\r\n\t\t\t\t\t\t\t\t\t\t'aria-label': 'change date',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</MuiPickersUtilsProvider>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Button variant='contained' type='submit'>\r\n\t\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tdirection='row'\r\n\t\t\t\tspacing={2}\r\n\t\t\t\tstyle={{ marginLeft: '1rem', marginRight: '1rem' }}\r\n\t\t\t>\r\n\t\t\t\t<InterventionHeader />\r\n\t\t\t\t{interventionList.map((el, index) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tindex > (currentPage - 1) * elementsPerPage &&\r\n\t\t\t\t\t\tindex <= currentPage * elementsPerPage\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<PatientsInterventionBox\r\n\t\t\t\t\t\t\t\tintervention={el}\r\n\t\t\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container justify='center'>\r\n\t\t\t\t<Grid item justify='center'>\r\n\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\tcount={Math.ceil(interventionList.length / elementsPerPage)}\r\n\t\t\t\t\t\tpage={currentPage}\r\n\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\tonChange={handlePageChange}\r\n\t\t\t\t\t\tstyle={{ margin: '2rem' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Patients\\Patients.js",["183","184","185","186","187","188","189","190","191","192","193"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { PatientBox } from '../PatientBox/PatientBox'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\n\r\nexport const Patients = () => {\r\n\tconst [datebaseSelected, setDatebaseSelected] = useState('GLIAL TUMORS')\r\n\tconst [patientList, setPatientList] = useState([])\r\n\tconst [selectedDate, setSelectedDate] = useState({\r\n\t\tstart: new Date(1990, 0, 1),\r\n\t\tend: new Date(),\r\n\t})\r\n\tconst [prop, setProp] = useState('Date')\r\n\tconst [refresh, setRefresh] = useState(false)\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [elementsPerPage, setElementsPerPage] = useState(20)\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tGetData()\r\n\t\tsetRefresh(false)\r\n\t}, [refresh])\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\tfunction handlePageChange(event, value) {\r\n\t\tsetCurrentPage(prev => (prev = value))\r\n\t}\r\n\r\n\tasync function GetData() {\r\n\t\tconst data = await GetAPI({ pathName: `/patient` })\r\n\r\n\t\tconst res = orderList(data.data, prop)\r\n\t\tsetPatientList(values => (values = res))\r\n\t}\r\n\r\n\tfunction handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tGetData()\r\n\t}\r\n\r\n\tfunction orderList(array, prop) {\r\n\t\tfunction dynamicSort(property) {\r\n\t\t\tvar sortOrder = 1\r\n\t\t\tif (property[0] === '-') {\r\n\t\t\t\tsortOrder = -1\r\n\t\t\t\tproperty = property.substr(1)\r\n\t\t\t}\r\n\t\t\treturn function (a, b) {\r\n\t\t\t\t/* next line works with strings and numbers,\r\n\t\t\t\t * and you may want to customize it to your needs\r\n\t\t\t\t */\r\n\t\t\t\tif (prop == 'Date') {\r\n\t\t\t\t\ta[property] = new Date(a[property])\r\n\t\t\t\t\tb[property] = new Date(b[property])\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result =\r\n\t\t\t\t\ta[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0\r\n\t\t\t\treturn result * sortOrder\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn array.sort(dynamicSort(prop))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid container direction='row'>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Grid container style={{ padding: '1rem' }} alignItems='center'>\r\n\t\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\t\tvalue={datebaseSelected}\r\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t\t<Button variant='contained' type='submit'>\r\n\t\t\t\t\t\t\t\tSearch\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tdirection='row'\r\n\t\t\t\tspacing={2}\r\n\t\t\t\tstyle={{ marginLeft: '1rem', marginRight: '1rem' }}\r\n\t\t\t>\r\n\t\t\t\t{patientList.map((el, index) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tindex > (currentPage - 1) * elementsPerPage &&\r\n\t\t\t\t\t\tindex <= currentPage * elementsPerPage\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\treturn <PatientBox patient={el} setRefresh={setRefresh} />\r\n\t\t\t\t})}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container justify='center'>\r\n\t\t\t\t<Grid item justify='center'>\r\n\t\t\t\t\t<Pagination\r\n\t\t\t\t\t\tcount={Math.ceil(patientList.length / elementsPerPage)}\r\n\t\t\t\t\t\tpage={currentPage}\r\n\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\tonChange={handlePageChange}\r\n\t\t\t\t\t\tstyle={{ margin: '2rem' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\PatientBox\\PatientBox.js",["194","195","196","197","198"],"import { Button, Grid, makeStyles, Paper, TextField } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { EditPatient } from '../EditPatient/EditPatient'\r\n\r\nexport const PatientBox = ({ patient, setRefresh }) => {\r\n\tconst [edit, setEdit] = useState(false)\r\n\tconst [newPatient, setNewPatient] = useState(patient)\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tfunction handleEdit(id) {\r\n\t\tsetEdit(prev => !prev)\r\n\t}\r\n\r\n\tfunction handleDelete(id) {\r\n\t\tDeleteAPI({ pathName: `/patient/${id}` })\r\n\t\tsetRefresh(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12}>\r\n\t\t\t<Paper style={{ padding: '0.5rem' }}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.Nume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.Prenume}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.CNP}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.DataDeNastere.slice(0, 10)}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.Sex}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.Varsta}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t{newPatient.Diagnostic}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' onClick={() => handleEdit(patient._id)}>\r\n\t\t\t\t\t\t\tEDIT\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tonClick={() => handleDelete(patient._id)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{edit ? (\r\n\t\t\t\t\t<EditPatient\r\n\t\t\t\t\t\tPatient={newPatient}\r\n\t\t\t\t\t\tsetRefresh={setRefresh}\r\n\t\t\t\t\t\tsetDone={setEdit}\r\n\t\t\t\t\t\tsetInt={setNewPatient}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : null}\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\EditPatient\\EditPatient.js",["199","200","201","202","203","204","205","206","207","208"],"import {\r\n\tButton,\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tPaper,\r\n\tSelect,\r\n\tTextField,\r\n} from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { Localisation } from '../Resources/Localisations'\r\nimport { GlialTumors } from '../Resources/GlialTumors'\r\nimport {\r\n\tKeyboardDatePicker,\r\n\tMuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { PostAPI } from '../API/PostAPI'\r\nimport { GetAPI } from '../API/GetAPI'\r\nimport { getDisplayDate } from '@material-ui/pickers/_helpers/text-field-helper'\r\nimport { DeleteAPI } from '../API/DeleteAPI'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\n\r\nexport const EditPatient = ({ Patient, setRefresh, setDone, setInt }) => {\r\n\tconst [newPatient, setNewPatient] = useState(Patient)\r\n\t// \t{\r\n\t// \t_id: Patient._id,\r\n\t// \tdb: Patient.db,\r\n\t// \tCNP: Patient.CNP,\r\n\t// \tNume: Patient.Nume,\r\n\t// \tPrenume: Patient.Prenume,\r\n\t// \tSex: Patient.Sex,\r\n\t// \tDataDeNastere: Patient.DataDeNastere,\r\n\t// })\r\n\r\n\tconst handleChange = prop => event => {\r\n\t\tsetNewPatient(values => ({ ...values, [prop]: event.target.value }))\r\n\t}\r\n\r\n\tasync function handleSubmit(e) {\r\n\t\te.preventDefault()\r\n\t\tconsole.log('new', newPatient)\r\n\t\tsetInt(prev => newPatient)\r\n\t\tconst res = PostAPI({\r\n\t\t\tpathName: `/Patient/update/${newPatient._id}`,\r\n\t\t\tdata: newPatient,\r\n\t\t})\r\n\t\tconsole.log(res)\r\n\t\tsetDone(false)\r\n\t\tsetInt(newPatient)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<Grid container alignItems='center'>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\t\t\t\t\tid='datebase-select'\r\n\t\t\t\t\t\t\t\tvalue={newPatient.db}\r\n\t\t\t\t\t\t\t\tonChange={handleChange('db')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Nume'\r\n\t\t\t\t\t\t\tvalue={newPatient.Nume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Nume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='Prenume'\r\n\t\t\t\t\t\t\tvalue={newPatient.Prenume}\r\n\t\t\t\t\t\t\tonChange={handleChange('Prenume')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={3}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='CNP'\r\n\t\t\t\t\t\t\tvalue={newPatient.CNP}\r\n\t\t\t\t\t\t\tonChange={handleChange('CNP')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' type='submit'>\r\n\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Interventions\\InterventionHeader.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Statistics.js",["209","210","211"],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\DataSelection\\DataSelection.js",["212","213","214","215"],"D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DatebaseSelector.js",["216"],"import {\r\n\tFormControl,\r\n\tGrid,\r\n\tInputLabel,\r\n\tMenuItem,\r\n\tSelect,\r\n} from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { DatebaseName } from '../Resources/Datebases'\r\n\r\nexport const DatebaseSelector = ({ datebaseSelected, setDatebaseSelected }) => {\r\n\tconst [currentDatebase, setCurrentDatebase] = useState(datebaseSelected)\r\n\r\n\tfunction handleChange(e) {\r\n\t\tsetDatebaseSelected(datebase => (datebase = e.target.value))\r\n\t\tsetCurrentDatebase(datebase => (datebase = e.target.value))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FormControl>\r\n\t\t\t<InputLabel id='datebase-select-label'>Datebase</InputLabel>\r\n\t\t\t<Select\r\n\t\t\t\tlabelId='datebase-select-label'\r\n\t\t\t\tid='datebase-select'\r\n\t\t\t\tvalue={currentDatebase}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t>\r\n\t\t\t\t{DatebaseName.map(db => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<MenuItem value={db} key={db}>\r\n\t\t\t\t\t\t\t{db}\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t</Select>\r\n\t\t</FormControl>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DateSelection.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\DataDisplay.js",["217","218","219"],"import React, { useState, useEffect } from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\n\r\nconst header = [\r\n\t{ field: 'id', headerName: 'ID', width: 130 },\r\n\t{ field: 'Nume', headerName: 'First name', width: 130 },\r\n\t{ field: 'Prenume', headerName: 'Last name', width: 130 },\r\n]\r\n\r\nconst rows = [\r\n\t{ id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n\t{ id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\r\n\t{ id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\r\n\t{ id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\r\n\t{ id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\r\n\t{ id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\r\n\t{ id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\r\n\t{ id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\r\n\t{ id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\r\n]\r\n\r\nexport const DataDisplay = ({ data }) => {\r\n\tconst [selectedData, setSelectedData] = useState()\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(data)\r\n\t\tconst db = data\r\n\t\tconsole.log(db)\r\n\t}, [])\r\n\r\n\tfunction handleSelectionChange(newSelection) {\r\n\t\tconsole.log(newSelection)\r\n\t\tsetSelectedData(prev => (prev = newSelection))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<DataGrid\r\n\t\t\trows={[{ id: 1 }]}\r\n\t\t\tcolumns={header}\r\n\t\t\tpageSize={5}\r\n\t\t\tcheckboxSelection\r\n\t\t\tonSelectionChange={() => handleSelectionChange}\r\n\t\t/>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\API\\GetInterventionList.js",["220","221","222"],"import { GetAPI } from './GetAPI'\r\n\r\nexport async function GetData({ datebaseSelected, startDate, endDate, prop }) {\r\n\tconst data = await GetAPI({ pathName: `/intervention/bypat` })\r\n\r\n\tconst filtered = data.data.filter(el => {\r\n\t\tel.Date = new Date(el.Date)\r\n\t\tif (\r\n\t\t\tel.db == datebaseSelected &&\r\n\t\t\t+el.Date.getTime() >= +startDate.getTime() &&\r\n\t\t\t+el.Date.getTime() <= +endDate.getTime()\r\n\t\t)\r\n\t\t\treturn el\r\n\t})\r\n\r\n\tconst res = await orderList(filtered, prop)\r\n\r\n\treturn res\r\n}\r\n\r\nasync function orderList(array, prop) {\r\n\tfunction dynamicSort(property) {\r\n\t\tvar sortOrder = 1\r\n\t\tif (property[0] === '-') {\r\n\t\t\tsortOrder = -1\r\n\t\t\tproperty = property.substr(1)\r\n\t\t}\r\n\t\treturn function (a, b) {\r\n\t\t\t/* next line works with strings and numbers,\r\n\t\t\t * and you may want to customize it to your needs\r\n\t\t\t */\r\n\t\t\tif (prop == 'Date') {\r\n\t\t\t\ta[property] = new Date(a[property])\r\n\t\t\t\tb[property] = new Date(b[property])\r\n\t\t\t}\r\n\r\n\t\t\tvar result =\r\n\t\t\t\ta[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0\r\n\t\t\treturn result * sortOrder\r\n\t\t}\r\n\t}\r\n\treturn array.sort(dynamicSort(prop))\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\PatientsStats\\PatientStats.js",["223","224","225","226"],"import { Grid, Typography } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nexport const PatientStats = ({ data }) => {\r\n\tconst [patients, setPatients] = useState()\r\n\tconsole.log('asd', data)\r\n\tconst N = data.length\r\n\tconst maleN = data.filter(el => el.Sex == 'Masculin').length\r\n\tconst femaleN = data.filter(el => el.Sex == 'Feminin').length\r\n\tconst malePercent = (maleN * 100) / N\r\n\tconst femalePercent = (femaleN * 100) / N\r\n\r\n\tconst all = femalePercent + malePercent\r\n\r\n\tconst state = {\r\n\t\tlabels: ['Masculin', 'Feminin'],\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: 'Gender',\r\n\t\t\t\tbackgroundColor: ['#C9DE00', '#B21F00'],\r\n\t\t\t\thoverBackgroundColor: ['#4B5000', '#501800'],\r\n\t\t\t\tdata: [maleN, femaleN],\r\n\t\t\t},\r\n\t\t],\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Grid container>\r\n\t\t\t<Grid item xs>\r\n\t\t\t\t<Doughnut data={state} height={50} />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs>\r\n\t\t\t\t<Typography>\r\n\t\t\t\t\tMasculin {maleN} n / {malePercent.toFixed(3)}%\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography>\r\n\t\t\t\t\tFeminin {femaleN} n / {femalePercent.toFixed(3)}%\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography>\r\n\t\t\t\t\tTotal {maleN + femaleN} n / {all}%\r\n\t\t\t\t</Typography>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}\r\n","D:\\NeurosurgeryStatistics\\client\\src\\Subcomponents\\LocalisationSelector.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\InterventionStats\\InterventionStats.js",["227","228","229","230"],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Methods\\FrequencyDistribution.js",[],"D:\\NeurosurgeryStatistics\\client\\src\\Statistics\\Methods\\SortObject.js",[],{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":3,"column":42,"nodeType":"237","messageId":"238","endLine":3,"endColumn":46},{"ruleId":"235","severity":1,"message":"239","line":6,"column":10,"nodeType":"237","messageId":"238","endLine":6,"endColumn":20},{"ruleId":"235","severity":1,"message":"240","line":3,"column":27,"nodeType":"237","messageId":"238","endLine":3,"endColumn":33},{"ruleId":"235","severity":1,"message":"241","line":3,"column":35,"nodeType":"237","messageId":"238","endLine":3,"endColumn":40},{"ruleId":"235","severity":1,"message":"242","line":1,"column":8,"nodeType":"237","messageId":"238","endLine":1,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":35,"column":28,"nodeType":"245","messageId":"246","endLine":35,"endColumn":30},{"ruleId":"247","severity":1,"message":"248","line":47,"column":5,"nodeType":"249","messageId":"250","endLine":49,"endColumn":6},{"ruleId":"235","severity":1,"message":"251","line":12,"column":10,"nodeType":"237","messageId":"238","endLine":12,"endColumn":26},{"ruleId":"235","severity":1,"message":"252","line":13,"column":10,"nodeType":"237","messageId":"238","endLine":13,"endColumn":22},{"ruleId":"235","severity":1,"message":"253","line":21,"column":10,"nodeType":"237","messageId":"238","endLine":21,"endColumn":24},{"ruleId":"235","severity":1,"message":"254","line":26,"column":9,"nodeType":"237","messageId":"238","endLine":26,"endColumn":12},{"ruleId":"235","severity":1,"message":"255","line":26,"column":14,"nodeType":"237","messageId":"238","endLine":26,"endColumn":20},{"ruleId":"256","severity":1,"message":"257","line":43,"column":46,"nodeType":"258","messageId":"259","endLine":43,"endColumn":68,"fix":"260"},{"ruleId":"261","severity":1,"message":"262","line":48,"column":5,"nodeType":"263","endLine":48,"endColumn":7,"suggestions":"264"},{"ruleId":"235","severity":1,"message":"265","line":1,"column":24,"nodeType":"237","messageId":"238","endLine":1,"endColumn":34},{"ruleId":"235","severity":1,"message":"266","line":2,"column":17,"nodeType":"237","messageId":"238","endLine":2,"endColumn":26},{"ruleId":"235","severity":1,"message":"267","line":2,"column":28,"nodeType":"237","messageId":"238","endLine":2,"endColumn":36},{"ruleId":"235","severity":1,"message":"265","line":1,"column":24,"nodeType":"237","messageId":"238","endLine":1,"endColumn":34},{"ruleId":"235","severity":1,"message":"268","line":1,"column":43,"nodeType":"237","messageId":"238","endLine":1,"endColumn":52},{"ruleId":"235","severity":1,"message":"266","line":2,"column":17,"nodeType":"237","messageId":"238","endLine":2,"endColumn":26},{"ruleId":"235","severity":1,"message":"269","line":4,"column":10,"nodeType":"237","messageId":"238","endLine":4,"endColumn":17},{"ruleId":"235","severity":1,"message":"270","line":23,"column":8,"nodeType":"237","messageId":"238","endLine":23,"endColumn":20},{"ruleId":"235","severity":1,"message":"271","line":7,"column":2,"nodeType":"237","messageId":"238","endLine":7,"endColumn":7},{"ruleId":"235","severity":1,"message":"272","line":20,"column":10,"nodeType":"237","messageId":"238","endLine":20,"endColumn":16},{"ruleId":"235","severity":1,"message":"253","line":21,"column":10,"nodeType":"237","messageId":"238","endLine":21,"endColumn":24},{"ruleId":"235","severity":1,"message":"273","line":22,"column":10,"nodeType":"237","messageId":"238","endLine":22,"endColumn":19},{"ruleId":"256","severity":1,"message":"257","line":42,"column":46,"nodeType":"258","messageId":"259","endLine":42,"endColumn":68,"fix":"274"},{"ruleId":"235","severity":1,"message":"275","line":28,"column":15,"nodeType":"237","messageId":"238","endLine":28,"endColumn":22},{"ruleId":"235","severity":1,"message":"276","line":31,"column":26,"nodeType":"237","messageId":"238","endLine":31,"endColumn":44},{"ruleId":"261","severity":1,"message":"262","line":35,"column":5,"nodeType":"263","endLine":35,"endColumn":7,"suggestions":"277"},{"ruleId":"261","severity":1,"message":"262","line":40,"column":5,"nodeType":"263","endLine":40,"endColumn":14,"suggestions":"278"},{"ruleId":"279","severity":1,"message":"280","line":56,"column":40,"nodeType":"281","messageId":"282","endLine":56,"endColumn":42},{"ruleId":"243","severity":1,"message":"244","line":59,"column":11,"nodeType":"245","messageId":"246","endLine":59,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":86,"column":14,"nodeType":"245","messageId":"246","endLine":86,"endColumn":16},{"ruleId":"279","severity":1,"message":"283","line":172,"column":39,"nodeType":"281","messageId":"282","endLine":172,"endColumn":41},{"ruleId":"235","severity":1,"message":"284","line":9,"column":8,"nodeType":"237","messageId":"238","endLine":9,"endColumn":20},{"ruleId":"235","severity":1,"message":"285","line":11,"column":2,"nodeType":"237","messageId":"238","endLine":11,"endColumn":20},{"ruleId":"235","severity":1,"message":"286","line":12,"column":2,"nodeType":"237","messageId":"238","endLine":12,"endColumn":25},{"ruleId":"235","severity":1,"message":"287","line":23,"column":9,"nodeType":"237","messageId":"238","endLine":23,"endColumn":21},{"ruleId":"235","severity":1,"message":"288","line":23,"column":23,"nodeType":"237","messageId":"238","endLine":23,"endColumn":38},{"ruleId":"235","severity":1,"message":"275","line":27,"column":15,"nodeType":"237","messageId":"238","endLine":27,"endColumn":22},{"ruleId":"235","severity":1,"message":"276","line":30,"column":26,"nodeType":"237","messageId":"238","endLine":30,"endColumn":44},{"ruleId":"261","severity":1,"message":"262","line":34,"column":5,"nodeType":"263","endLine":34,"endColumn":7,"suggestions":"289"},{"ruleId":"261","severity":1,"message":"262","line":39,"column":5,"nodeType":"263","endLine":39,"endColumn":14,"suggestions":"290"},{"ruleId":"243","severity":1,"message":"244","line":72,"column":14,"nodeType":"245","messageId":"246","endLine":72,"endColumn":16},{"ruleId":"279","severity":1,"message":"283","line":124,"column":34,"nodeType":"281","messageId":"282","endLine":124,"endColumn":36},{"ruleId":"235","severity":1,"message":"265","line":1,"column":24,"nodeType":"237","messageId":"238","endLine":1,"endColumn":34},{"ruleId":"235","severity":1,"message":"268","line":1,"column":43,"nodeType":"237","messageId":"238","endLine":1,"endColumn":52},{"ruleId":"235","severity":1,"message":"266","line":2,"column":17,"nodeType":"237","messageId":"238","endLine":2,"endColumn":26},{"ruleId":"235","severity":1,"message":"269","line":4,"column":10,"nodeType":"237","messageId":"238","endLine":4,"endColumn":17},{"ruleId":"235","severity":1,"message":"270","line":11,"column":8,"nodeType":"237","messageId":"238","endLine":11,"endColumn":20},{"ruleId":"235","severity":1,"message":"271","line":7,"column":2,"nodeType":"237","messageId":"238","endLine":7,"endColumn":7},{"ruleId":"235","severity":1,"message":"266","line":11,"column":17,"nodeType":"237","messageId":"238","endLine":11,"endColumn":26},{"ruleId":"235","severity":1,"message":"284","line":12,"column":8,"nodeType":"237","messageId":"238","endLine":12,"endColumn":20},{"ruleId":"235","severity":1,"message":"252","line":13,"column":10,"nodeType":"237","messageId":"238","endLine":13,"endColumn":22},{"ruleId":"235","severity":1,"message":"291","line":14,"column":10,"nodeType":"237","messageId":"238","endLine":14,"endColumn":21},{"ruleId":"235","severity":1,"message":"285","line":16,"column":2,"nodeType":"237","messageId":"238","endLine":16,"endColumn":20},{"ruleId":"235","severity":1,"message":"286","line":17,"column":2,"nodeType":"237","messageId":"238","endLine":17,"endColumn":25},{"ruleId":"235","severity":1,"message":"272","line":20,"column":10,"nodeType":"237","messageId":"238","endLine":20,"endColumn":16},{"ruleId":"235","severity":1,"message":"253","line":21,"column":10,"nodeType":"237","messageId":"238","endLine":21,"endColumn":24},{"ruleId":"235","severity":1,"message":"273","line":22,"column":10,"nodeType":"237","messageId":"238","endLine":22,"endColumn":19},{"ruleId":"235","severity":1,"message":"292","line":9,"column":10,"nodeType":"237","messageId":"238","endLine":9,"endColumn":22},{"ruleId":"235","severity":1,"message":"293","line":32,"column":9,"nodeType":"237","messageId":"238","endLine":32,"endColumn":16},{"ruleId":"235","severity":1,"message":"294","line":32,"column":18,"nodeType":"237","messageId":"238","endLine":32,"endColumn":28},{"ruleId":"235","severity":1,"message":"295","line":3,"column":10,"nodeType":"237","messageId":"238","endLine":3,"endColumn":21},{"ruleId":"235","severity":1,"message":"296","line":14,"column":9,"nodeType":"237","messageId":"238","endLine":14,"endColumn":21},{"ruleId":"261","severity":1,"message":"297","line":34,"column":5,"nodeType":"263","endLine":34,"endColumn":7,"suggestions":"298"},{"ruleId":"243","severity":1,"message":"244","line":53,"column":37,"nodeType":"245","messageId":"246","endLine":53,"endColumn":39},{"ruleId":"235","severity":1,"message":"299","line":3,"column":2,"nodeType":"237","messageId":"238","endLine":3,"endColumn":6},{"ruleId":"235","severity":1,"message":"300","line":10,"column":7,"nodeType":"237","messageId":"238","endLine":10,"endColumn":11},{"ruleId":"235","severity":1,"message":"296","line":23,"column":9,"nodeType":"237","messageId":"238","endLine":23,"endColumn":21},{"ruleId":"261","severity":1,"message":"301","line":29,"column":5,"nodeType":"263","endLine":29,"endColumn":7,"suggestions":"302"},{"ruleId":"279","severity":1,"message":"280","line":6,"column":39,"nodeType":"281","messageId":"282","endLine":6,"endColumn":41},{"ruleId":"243","severity":1,"message":"244","line":9,"column":10,"nodeType":"245","messageId":"246","endLine":9,"endColumn":12},{"ruleId":"243","severity":1,"message":"244","line":32,"column":13,"nodeType":"245","messageId":"246","endLine":32,"endColumn":15},{"ruleId":"235","severity":1,"message":"303","line":5,"column":9,"nodeType":"237","messageId":"238","endLine":5,"endColumn":17},{"ruleId":"235","severity":1,"message":"304","line":5,"column":19,"nodeType":"237","messageId":"238","endLine":5,"endColumn":30},{"ruleId":"243","severity":1,"message":"244","line":8,"column":41,"nodeType":"245","messageId":"246","endLine":8,"endColumn":43},{"ruleId":"243","severity":1,"message":"244","line":9,"column":43,"nodeType":"245","messageId":"246","endLine":9,"endColumn":45},{"ruleId":"235","severity":1,"message":"305","line":1,"column":16,"nodeType":"237","messageId":"238","endLine":1,"endColumn":26},{"ruleId":"235","severity":1,"message":"267","line":3,"column":17,"nodeType":"237","messageId":"238","endLine":3,"endColumn":25},{"ruleId":"235","severity":1,"message":"306","line":4,"column":10,"nodeType":"237","messageId":"238","endLine":4,"endColumn":18},{"ruleId":"279","severity":1,"message":"307","line":18,"column":23,"nodeType":"281","messageId":"308","endLine":18,"endColumn":25},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'AddPatient' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'React' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'AllInterventions' is defined but never used.","'Localisation' is defined but never used.","'getDisplayDate' is defined but never used.","'cnp' is assigned a value but never used.","'setCnp' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['Date'] found.","Property","unnecessarilyComputedProperty",{"range":"311","text":"312"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.","ArrayExpression",["313"],"'makeStyles' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'TextField' is defined but never used.","'PostAPI' is defined but never used.","'handleChange' is assigned a value but never used.","'Paper' is defined but never used.","'GetAPI' is defined but never used.","'DeleteAPI' is defined but never used.",{"range":"314","text":"312"},"'setProp' is assigned a value but never used.","'setElementsPerPage' is assigned a value but never used.",["315"],["316"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'DateFnsUtils' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'selectedDate' is assigned a value but never used.","'setSelectedDate' is assigned a value but never used.",["317"],["318"],"'GlialTumors' is defined but never used.","'PatientStats' is defined but never used.","'skipped' is assigned a value but never used.","'setSkipped' is assigned a value but never used.","'DataDisplay' is defined but never used.","'selectedData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleGetData'. Either include it or remove the dependency array.",["319"],"'Grid' is defined but never used.","'rows' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["320"],"'patients' is assigned a value but never used.","'setPatients' is assigned a value but never used.","'Typography' is defined but never used.","'Doughnut' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",[1306,1314],"'Date'",{"desc":"321","fix":"322"},[1197,1205],{"desc":"321","fix":"323"},{"desc":"324","fix":"325"},{"desc":"321","fix":"326"},{"desc":"324","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},"Update the dependencies array to be: [GetData]",{"range":"332","text":"333"},{"range":"334","text":"333"},"Update the dependencies array to be: [GetData, refresh]",{"range":"335","text":"336"},{"range":"337","text":"333"},{"range":"338","text":"336"},"Update the dependencies array to be: [handleGetData]",{"range":"339","text":"340"},"Update the dependencies array to be: [data]",{"range":"341","text":"342"},[1394,1396],"[GetData]",[1127,1129],[1192,1201],"[GetData, refresh]",[1015,1017],[1080,1089],[1378,1380],"[handleGetData]",[1076,1078],"[data]"]